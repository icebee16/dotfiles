# plugin manage
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
hook_post_update = '''
	if dein#util#_is_windows()
		let cmd = 'tools\\update-dll-mingw'
	elseif dein#util#_is_cygwin()
		let cmd = 'make -f make_cygwin.mak'
	elseif executable('gmake')
		let cmd = 'gmake'
	else
		let cmd = 'make'
	endif
		let g:dein#plugin.build = cmd
	'''

[[plugins]]
repo = 'Shougo/unite.vim'

# context filetype
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# theme
[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
	syntax enable
	set t_Co=256
	autocmd MyAutoCmd VimEnter * nested colorscheme molokai
	autocmd MyAutoCmd ColorScheme * highlight Comment ctermfg=102
	autocmd MyAutoCmd ColorScheme * highlight Visual ctermfg=244
	autocmd MyAutoCmd ColorScheme * highlight Normal ctermbg=none
	autocmd MyAutoCmd ColorScheme * highlight LineNr ctermbg=none
	autocmd MyAutoCmd ColorScheme * highlight SignColumn ctermbg=none
	autocmd MyAutoCmd ColorScheme * highlight VertSplit ctermbg=none
	autocmd MyAutoCmd ColorScheme * highlight NonText ctermbg=none
'''

# status line
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
	let g:lightline = {
		\'colorscheme'  :'one',
		\'active'   :   {
		\	'left'	:	[	['mode', 'paste'],
		\							['readonly', 'filename', 'modified', 'ale']	]
		\},
		\'component_function'	:	{
		\	'ale'	:	'ALEGetStatusLine'
		\}
		\}
'''

# git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

# nerdtree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
	let NERDTreeShowHidden=1
	nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'

# snippets
[[plugins]]
repo = 'SirVer/ultisnips'

[[plugins]]
repo = 'honza/vim-snippets'

# REPL
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
    let g:neoterm_autoinsert = 1
    let g:neoterm_default_mod = 'belowright'
    nnoremap <silent> <C-e><C-e> :TREPLSendFile<CR>
    nnoremap <silent> <C-e>p :T cd "$(dirname  %)";python  %<CR>
    nnoremap <silent> <C-e>c :T cd "$(dirname  %)";g++  %;./a.out<CR>
    nnoremap <silent> vt :Ttoggle<CR>
'''

# completion
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
build = 'coc#util#install()'
hook_add = '''
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    nnoremap <silent> G :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction
'''
